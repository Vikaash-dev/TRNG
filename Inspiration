 True Random Number Generator (TRNG) in Python that uses real-time data from various sources as entropy:

**trng.py**
```python
import requests
import psutil
import time

class TRNG:
    def __init__(self):
        self.entropy_sources = [
            self.crypto_price_entropy,
            self.weather_entropy,
            self.cpu_load_entropy,
            self.cpu_clock_speed_entropy,
            self.fan_temp_entropy
        ]

    def crypto_price_entropy(self):
        # Use free API from CoinGecko to get current Bitcoin price
        response = requests.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd')
        data = response.json()
        return int(data['bitcoin']['usd'] * 100)

    def weather_entropy(self):
        # Use free API from OpenWeatherMap to get current weather data
        api_key = 'YOUR_OPENWEATHERMAP_API_KEY'
        response = requests.get(f'http://api.openweathermap.org/data/2.5/weather?q=London&appid={api_key}')
        data = response.json()
        return int(data['main']['temp'] * 100)

    def cpu_load_entropy(self):
        # Get current CPU load
        return int(psutil.cpu_percent() * 100)

    def cpu_clock_speed_entropy(self):
        # Get current CPU clock speed
        return int(psutil.cpu_freq().current * 100)

    def fan_temp_entropy(self):
        # Get current fan temperature (if available)
        try:
            return int(psutil.sensors_temperatures()['coretemp'].current * 100)
        except (KeyError, AttributeError):
            return 0

    def generate_random_number(self):
        entropy = 0
        for source in self.entropy_sources:
            entropy += source()
        return entropy % (2**32)  # 32-bit random number

if __name__ == '__main__':
    trng = TRNG()
    print(trng.generate_random_number())
```
This code defines a `TRNG` class that uses five entropy sources:

1. Current Bitcoin price from CoinGecko API
2. Current weather data from OpenWeatherMap API
3. Current CPU load
4. Current CPU clock speed
5. Current fan temperature (if available)

The `generate_random_number` method combines the entropy from all sources and returns a 32-bit random number.

**API Example**

To use this TRNG as an API, you can create a simple Flask app:
```python
from flask import Flask, jsonify
from trng import TRNG

app = Flask(__name__)

trng = TRNG()

@app.route('/random', methods=['GET'])
def get_random_number():
    random_number = trng.generate_random_number()
    return jsonify({'random_number': random_number})

if __name__ == '__main__':
    app.run(debug=True)
```
This API has a single endpoint `/random` that returns a JSON response with a random number generated by the TRNG.

replace `YOUR_OPENWEATHERMAP_API_KEY` with your OpenWeatherMap API key. Also, this code assumes that the fan temperature is available on your system; if not, the `fan_temp_entropy` method will return 0.
